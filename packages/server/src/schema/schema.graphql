type PayU {
  token: String!
  payoutMethods: [PayoutMethod!]
}

type Query {
  payU: PayU!
  cities: [City]
  categories: [Category]
  trainers(cityId: String, categoryId: String, subcategoryId: String, offset: Int, limit: Int): PaginatedTrainers
  trainer(id: String): Trainer
  comments(trainerId: String): [Comment]
  events(trainerId: String, startDate: String, endDate: String): [Event]
}

type Mutation {
  createCity(name: String): City
  deleteCity(id: String): Boolean
}

type PayoutMethod {
  value: String
  brandImageUrl: String
  name: String
  status: String
  minAmount: Float
  maxAmount: Float
}

type City {
  id: String
  name: String
}

type Category {
  id: String
  name: String
  description: String
  subcategories: [Subcategory!]
}

type PaginatedTrainers {
  trainers: [Trainer]
  trainersTotalNumber: Int
}

type Trainer {
  id: String
  name: String
  lastName: String
  description: String
  image: String
  rating: Float
  totalRates: Int
  subcategories: [Subcategory!]
  locations: [Location]
}

type Subcategory {
  id: String
  name: String
  description: String
}

type Comment {
  id: String
  description: String
  rating: Float
  date: String
  userImage: String
  userFirstName: String
  userLastName: String
  trainerId: String
  userId: String
}

type Event {
  id: String
  trainerId: String
  description: String
  startDate: String
  endDate: String
}

type Location {
  id: String
  name: String
  streetName: String
  streetNumber: Int
  city: City
}
